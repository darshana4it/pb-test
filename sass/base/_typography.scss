/// Importing Lato, Pastcode brand typeface
@import url('https://fonts.googleapis.com/css?family=Lato:100,100i,300,300i,400,400i,700,700i,900,900i&display=swap');

/// Typeface data
/// Primary Typeface of Pastbook and related fonts
/// 
/// @type map
/// Todo: Move to design tokens
$font-family-data: (
    base: #{ 'Lato',
        -apple-system,
        'BlinkMacSystemFont',
        'San Francisco',
        'Roboto',
        'Segoe UI',
        'Helvetica Neue',
        sans-serif},
    monospace: #{Monaco,
        Consolas,
        'Lucida Console',
        monospace},
);

/// Font weight data
/// Font weight values for available families.
/// Default values are based on Lato.
/// 
/// @type map
$font-weight-data: (
    base: (
        'light': 300,
        'regular': 400,
        'medium': 600,
        'bold': 700
    )
);

/// Line height data
/// Line height values for main text block types on mobile (base) and large screens.
/// 
/// @type map
$line-height-data: (
    caption: (
        base: rem(16px),
    ),
    heading: (
        base: rem(24px),
    ),
    subheading: (
        base: rem(40px),
    ),
    input: (
        base: rem(24px),
    ),
    body: (
        base: rem(20px),
    ),
    button: (
        base: rem(16px),
    )
);

/// Font size data
/// Font sizes for main text block types on mobile (base) and large screens.
/// 
/// @type map
$font-size-data: (
    caption: (
        base: rem(14px),
        large-screen: rem(12px),
    ),
    heading: (
        base: rem(17px),
        large-screen: rem(16px),
    ),
    subheading: (
        base: rem(30px),
        large-screen: rem(12px),
    ),
    input: (
        base: rem(14px),
        large-screen: rem(14px),
    ),
    body: (
        base: rem(16px),
        large-screen: rem(16px),
    ),
    button: (
        base: rem(14px),
        large-screen: rem(16px),
    )
);

/// Returns the font stack for a given family.
///
/// @param {String} $family [base] - The key for the given family.
/// @return {Number} The font stack for the family.
@function font-family($family: base) {
    $fetched-value: map-get($font-family-data, $family);

    @if $fetched-value != null {
        @return $fetched-value;
    } @else {
        @error 'Font family `#{$family}` not found. Available font families: #{available-names($font-family-data)}';
    }
}

/// Returns the line height for a given text style and variant.
///
/// @param {String} $style - The font style.
/// @param {String} $variant [base] - The variant on the font-size.
/// @return {Number} The line-height for the text-style.
@function line-height($style, $variant: base) {
    $fetched-line-height: map-get(map-get($line-height-data, $style), $variant);

    @if type-of($fetched-line-height) != null {
        @return $fetched-line-height;
    } @else {
        @error 'Line height `#{$style} - #{$variant}` not found. Available line heights: #{available-names($line-height-data)}';
    }
}

/// Returns the font size for a given text style and variant.
///
/// @param {String} $style - The font style.
/// @param {String} $variant [base] - The variant on the font-size.
/// @return {Number} The font-size for the text-style.
@function font-size($style, $variant: base) {
    $fetched-font-size: map-get(map-get($font-size-data, $style), $variant);

    @if type-of($fetched-font-size) != null {
        @return $fetched-font-size;
    } @else {
        @error 'Font size `#{$style} - #{$variant}` not found. Available font sizes: #{available-names($line-height-data)}';
    }
}

/// Returns the font size for a given text style and variant.
///
/// @param {String} $variant [base] - The font style.
/// @param {String} $family - The variant on the font-weight.
/// @return {Number} The font-size for the text-style.
/// Hardcoded for 'base' font weights
/// Todo: Extend for other typefaces
@function font-weight($variant, $family: 'base') {
    $fetched-font-weight: map-get(map-get($font-weight-data, $family), $variant);

    @if type-of(fetched-font-weight) != null {
        @return $fetched-font-weight;
    } @else {
        @error 'Font weight `#{$style} - #{$variant}` not found. Available font weight: #{available-names($fetched-font-weight)}';
    }
}

/// Setting up multiline ellipsis for a given line height and number of lines to show.
///
/// @param {String} $line-height - Line height of the text block.
/// @param {String} $lines-to-show - Maximum number of lines to show.
/// @return {Number} The font-size for the text-style.
@mixin multiline-ellipsis($line-height, $lines-to-show:1) {
	display: block;
	display: -webkit-box;
	line-height: ($line-height);
	height: ($line-height * $lines-to-show);
	-webkit-line-clamp: $lines-to-show;
	-webkit-box-orient: vertical;
	overflow: hidden;
    text-overflow: ellipsis;
}